{"version":3,"file":"main.f625f9ae.js","sources":["../../src/frontend/main.ts"],"sourcesContent":["// import 'vite/dynamic-import-polyfill'; // for prod mode\nimport './_framework/css/index.css';\n// import { createSearch } from './components/molecules/search/search.molecule';\n\nconst count_interval_seconds= 5;\nconst BUS_CAPACITY: {[key: string]: number} = {\n    seats: 36,\n    wheelchair: 2,\n    standing: 64\n}\n\nfunction timeStringToUnix(time: string): number {\n    // Split the \"12:25\" string into hours and minutes\n    const [hours, minutes] = time.split(\":\").map(Number);\n\n    // Get the current date and set the hours and minutes\n    const now = new Date();\n    now.setHours(hours, minutes, 0, 0); // Set hours, minutes, seconds, and milliseconds\n\n    // Return the Unix time in milliseconds\n    return now.getTime();\n}\n\nfunction unixToTimeString(unixTime: number): string {\n    // Create a new Date object from the Unix time\n    const date = new Date(unixTime);\n\n    // Get hours and minutes from the Date object\n    const hours = date.getHours().toString().padStart(2, '0');\n    const minutes = date.getMinutes().toString().padStart(2, '0');\n\n    // Return the time as a \"hh:mm\" string\n    return `${hours}:${minutes}`;\n}\n\nfunction addMinutesToTime(time: string, minutesToAdd: number): string {\n    // Convert the time string to Unix time (in milliseconds)\n    const unixTime = timeStringToUnix(time);\n\n    // Add the specified number of minutes (converted to milliseconds)\n    const updatedUnixTime = unixTime + minutesToAdd * 60000;\n\n    // Convert the updated Unix time back to a \"hh:mm\" string\n    return unixToTimeString(updatedUnixTime);\n}\n\n// Example usage:\nconst time = \"12:25\";\nconst minutesToAdd = 45; // Change this value to any number of minutes you want to add\n\n// const updatedTime = addMinutesToTime(time, minutesToAdd);\n// console.log(`Updated Time: ${updatedTime}`); // Output will be in the \"hh:mm\" format\n\n\nconst url = `https://bahn-test-3687838850c6.herokuapp.com/`;\nlet statusElement = document.getElementById('status');\nconst updateStatus = (status: string) => {\n    if(statusElement){\n        statusElement.setAttribute('data-status', status);\n        statusElement.innerHTML = status;\n    }\n\n}\n\nconst updateUI = (body: string) => {\n    let json;\n        try {\n            json = JSON.parse(body);\n            const result = document.querySelector('#result');\n            const line = document.querySelector('#line');\n            if(result && json && line){\n\n                line.innerHTML = `\n                <div class=\"d-inline-block\">\n                    <div class=\"hex-badge\">\n                        <span class=\"badge-number\">${json.busLine}</span>\n                    </div>\n                </div>\n                <div class=\"d-inline-block\">\n                 - ${json.route}\n                </div>\n                \n                `;\n                let rows = '';\n                let  extraTime = 0;\n                for(const item of json.stations) {\n\n                    let status = 'full';\n                    let i = 0;\n                    let capacity: number = 0;\n                    for(const seatTyoe in BUS_CAPACITY){\n                        capacity += BUS_CAPACITY[seatTyoe];\n                    }\n                    console.log(capacity)\n                    for(const passengerType in item.checkedPassengers){\n                        i += item.checkedPassengers[passengerType];\n                    }\n                    const percentage = i / capacity * 100;\n                    console.log('percentage')\n                    console.log(percentage)\n                    if(percentage > 90){\n                        extraTime += 3;\n                    } else if(percentage > 70){\n                        extraTime += 2;\n                    } else if(percentage > 50){\n                        extraTime += 1;\n                    }\n                    if(item.checkedPassengers.wheelchair > 0){\n                        extraTime += 2;\n                    }\n                    if(percentage >= 99){\n                        status = 'full';\n                    } else if(percentage >= 75){\n                        status = 'high';\n                    } else if(percentage >= 50){    \n                        status = 'medium'\n                    } else if(percentage >= 20){    \n                        status = 'low'\n                    } else {\n                        status = 'none'\n                    }\n                    console.log(i)\n                    // const allPassenger = item.checkedPassengers.map\n                    let statusTDS = ``\n                    switch(status){\n                        case 'low':\n                            statusTDS = `\n                            <td class=\"low\">&nbsp;</td>\n                            <td class=\"low\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            `;\n                            break;\n                        case 'medium':\n                            statusTDS = `\n                            <td class=\"medium\">&nbsp;</td>\n                            <td class=\"medium\">&nbsp;</td>\n                            <td class=\"medium\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            `;\n                            break;\n                        case 'high':\n                            statusTDS = `\n                            <td class=\"high\">&nbsp;</td>\n                            <td class=\"high\">&nbsp;</td>\n                            <td class=\"high\">&nbsp;</td>\n                            <td class=\"high\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            `;\n                            break;\n                        case 'full':\n                            statusTDS = `\n                            <td class=\"full\">&nbsp;</td>\n                            <td class=\"full\">&nbsp;</td>\n                            <td class=\"full\">&nbsp;</td>\n                            <td class=\"full\">&nbsp;</td>\n                            <td class=\"full\">&nbsp;</td>\n                            `;\n                            break;\n                         \n                        default:\n                            statusTDS = `\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            <td class=\"none\">&nbsp;</td>\n                            `;\n\n                    }\n                    let additional = '';\n                    if(extraTime > 0){\n                        additional = `<span class=\"red\">+ ${extraTime}</span>`;\n                    } else {\n                        additional = `<span class=\"green\">- ${extraTime}</span>`;\n                    }\n                    rows += `<tr>\n                    <td>\n                        <img class=\"center\" src=\"${prefix}/assets/haltestelle.svg\" alt=\"haltestelle\" width=\"20\" height=\"20\">\n                    </td>\n                    <td>${item.estimatedArrival}</td>\n                    <td>${addMinutesToTime(item.estimatedArrival, extraTime)} ${additional}</td>\n                    <td>${item.stationName}</td>\n                    <td>\n                        <img src=\"${prefix}/assets/elderly.svg\" alt=\"elderly\" width=\"20\" height=\"20\">\n                        ${item.checkedPassengers.elderly}\n                        <img src=\"${prefix}/assets/people.svg\" alt=\"people\" width=\"20\" height=\"20\">\n                        ${item.checkedPassengers.normal}\n                        <img src=\"${prefix}/assets/wheelchair.svg\" alt=\"wheelchair\" width=\"20\" height=\"20\">\n                        <i class=\"bi bi-person-wheelchair\"></i>\n                        ${item.checkedPassengers.wheelchair}\n                    </td>\n                    <td>\n                            <div class=\"activity__table\">\n        \n                                <table class=\" fixed-height-table activity__stream\">\n                                    <thead>\n                                        <tr>\n                                            \n                                            <td>0%</td>\n                                            \n                                            <td>25%</td>\n                                            \n                                            <td>50%</td>\n                                            \n                                            <td>75%</td>\n                                            <td>100%</td>\n                                            \n                                            \n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            \n                                            \n                                            ${statusTDS}\n                                            \n                                            \n                                        </tr>\n                                    </tbody>    \n                                </table>\n                            </div>\n                            \n                            \n                                \n                            \n                            \n                        </td>\n                    </tr>`;\n                }\n                console.log(json);\n                result.innerHTML = `\n                <table class=\"table table--timetablXe table-striped\">\n                <tbody>\n                ${rows}\n                </tbody>\n                </tabl>\n                \n                `;\n                updateStatus('ok');\n                // if(statusElement) statusElement.innerHTML = 'ok';\n            }\n        } catch (error) {\n            updateStatus('error');\n            console.error('Error:', error);\n            // if(statusElement) statusElement.innerHTML = 'error';\n        }\n}\n\n\nconst prefix = process.env.NODE_ENV === 'production' ? '/driver-dashboard' : '';\nconst options = {\n//   method: 'GET',\n//   headers: {\n//     'DB-Client-Id': env.VITE_DB_CLIENT_ID, // Replace with your actual client ID\n//     'DB-Api-Key': env.VITE_DB_SECRET, // Replace with your actual client secret\n//     'Accept': 'application/xml'\n//   }\n};\n\n      let fetchInterval: any;\n      let countdownInterval: any;\n      let countdown = count_interval_seconds; // Countdown starts from 5\n      let fetchCount = 0; // Counter for the number of fetches\n      \n      function updateCounterDisplay() {\n          const counterElement = document.getElementById('counter');\n          if (counterElement) {\n              counterElement.textContent = `Next update in: ${countdown} seconds | ${fetchCount}`;\n          }\n      }\n      \n      function fetchData() {\n          console.log(\"Fetching data...\");\n          fetchCount++; // Increment the fetch count\n          // Replace with your actual fetch request\n          fetch(url)\n              .then(response => response.json())\n              .then(data => {\n                  updateUI(JSON.stringify(data));\n                  resetCountdown(); // Reset countdown after fetching\n              })\n              .catch(error => {\n                  console.error('Error fetching data:', error)\n                  updateStatus('error');\n              } );\n      }\n      \n      function startCountdown() {\n        console.log('start countdown');\n\n        \n        fetchData();\n          countdownInterval = setInterval(() => {\n              countdown--;\n              \n              updateCounterDisplay();\n      \n              if (countdown <= 0) {\n                  fetchData();\n              }\n          }, 1000); // Countdown updates every 1 second\n      }\n      \n      function resetCountdown() {\n          countdown = count_interval_seconds; // Reset countdown to 5 seconds\n          updateCounterDisplay();\n      }\n      \n      function stopFetching() {\n          if (fetchInterval !== undefined) {\n              clearInterval(fetchInterval);\n          }\n          if (countdownInterval !== undefined) {\n              clearInterval(countdownInterval);\n          }\n          console.log(\"Stopped fetching and countdown.\");\n      }\n      \n      function startFetching() {\n          resetCountdown(); // Initialize the countdown\n          startCountdown(); // Start the countdown interval\n      }\n      \n      updateStatus('loading');\n      // Start fetching when the page is loaded\n    //   if(statusElement) statusElement.innerHTML = '... loading';\n      window.addEventListener('load', startFetching);\n      \n      // Stop fetching and countdown when the tab is closed or the page is unloaded\n      window.addEventListener('beforeunload', stopFetching);\n      \n      // Optionally, stop fetching and countdown when the user navigates away from the tab\n      document.addEventListener('visibilitychange', () => {\n          if (document.visibilityState === 'hidden') {\n              stopFetching();\n          } else if (document.visibilityState === 'visible') {\n              startFetching();\n          }\n      });"],"names":["BUS_CAPACITY","timeStringToUnix","time","hours","minutes","now","unixToTimeString","unixTime","date","addMinutesToTime","minutesToAdd","updatedUnixTime","url","statusElement","updateStatus","status","updateUI","body","json","result","line","rows","extraTime","item","i","capacity","seatTyoe","passengerType","percentage","statusTDS","additional","prefix","error","countdownInterval","countdown","fetchCount","updateCounterDisplay","counterElement","fetchData","response","data","resetCountdown","startCountdown","stopFetching","startFetching"],"mappings":"AAKA,MAAMA,EAAwC,CAC1C,MAAO,GACP,WAAY,EACZ,SAAU,EACd,EAEA,SAASC,EAAiBC,EAAsB,CAEtC,KAAA,CAACC,EAAOC,CAAO,EAAIF,EAAK,MAAM,GAAG,EAAE,IAAI,MAAM,EAG7CG,EAAM,IAAI,KAChB,OAAAA,EAAI,SAASF,EAAOC,EAAS,EAAG,CAAC,EAG1BC,EAAI,SACf,CAEA,SAASC,EAAiBC,EAA0B,CAE1C,MAAAC,EAAO,IAAI,KAAKD,CAAQ,EAGxBJ,EAAQK,EAAK,SAAS,EAAE,WAAW,SAAS,EAAG,GAAG,EAClDJ,EAAUI,EAAK,WAAW,EAAE,WAAW,SAAS,EAAG,GAAG,EAG5D,MAAO,GAAGL,KAASC,GACvB,CAEA,SAASK,EAAiBP,EAAcQ,EAA8B,CAK5D,MAAAC,EAHWV,EAAiBC,CAAI,EAGHQ,EAAe,IAGlD,OAAOJ,EAAiBK,CAAe,CAC3C,CAUA,MAAMC,EAAM,gDACZ,IAAIC,EAAgB,SAAS,eAAe,QAAQ,EACpD,MAAMC,EAAgBC,GAAmB,CAClCF,IACeA,EAAA,aAAa,cAAeE,CAAM,EAChDF,EAAc,UAAYE,EAGlC,EAEMC,EAAYC,GAAiB,CAC3B,IAAAC,EACI,GAAA,CACOA,EAAA,KAAK,MAAMD,CAAI,EAChB,MAAAE,EAAS,SAAS,cAAc,SAAS,EACzCC,EAAO,SAAS,cAAc,OAAO,EACxC,GAAAD,GAAUD,GAAQE,EAAK,CAEtBA,EAAK,UAAY;AAAA;AAAA;AAAA,qDAGoBF,EAAK;AAAA;AAAA;AAAA;AAAA,qBAIrCA,EAAK;AAAA;AAAA;AAAA,kBAIV,IAAIG,EAAO,GACNC,EAAY,EACP,UAAAC,KAAQL,EAAK,SAAU,CAE7B,IAAIH,EAAS,OACTS,EAAI,EACJC,EAAmB,EACvB,UAAUC,KAAY1B,EAClByB,GAAYzB,EAAa0B,GAE7B,QAAQ,IAAID,CAAQ,EACV,UAAAE,KAAiBJ,EAAK,kBAC5BC,GAAKD,EAAK,kBAAkBI,GAE1B,MAAAC,EAAaJ,EAAIC,EAAW,IAClC,QAAQ,IAAI,YAAY,EACxB,QAAQ,IAAIG,CAAU,EACnBA,EAAa,GACCN,GAAA,EACPM,EAAa,GACNN,GAAA,EACPM,EAAa,KACNN,GAAA,GAEdC,EAAK,kBAAkB,WAAa,IACtBD,GAAA,GAEdM,GAAc,GACJb,EAAA,OACHa,GAAc,GACXb,EAAA,OACHa,GAAc,GACXb,EAAA,SACHa,GAAc,GACXb,EAAA,MAEAA,EAAA,OAEb,QAAQ,IAAIS,CAAC,EAEb,IAAIK,EAAY,GACT,OAAAd,OACE,MACWc,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAOZ,UACC,SACWA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAOZ,UACC,OACWA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAOZ,UACC,OACWA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAOZ,cAGYA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BASpB,IAAIC,EAAa,GACdR,EAAY,EACXQ,EAAa,uBAAuBR,WAEpCQ,EAAa,yBAAyBR,WAElCD,GAAA;AAAA;AAAA,mDAEuBU;AAAA;AAAA,0BAEzBR,EAAK;AAAA,0BACLd,EAAiBc,EAAK,iBAAkBD,CAAS,KAAKQ;AAAA,0BACtDP,EAAK;AAAA;AAAA,oCAEKQ;AAAA,0BACVR,EAAK,kBAAkB;AAAA,oCACbQ;AAAA,0BACVR,EAAK,kBAAkB;AAAA,oCACbQ;AAAA;AAAA,0BAEVR,EAAK,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAyBHM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAc9B,CACA,QAAQ,IAAIX,CAAI,EAChBC,EAAO,UAAY;AAAA;AAAA;AAAA,kBAGjBE;AAAA;AAAA;AAAA;AAAA,kBAKFP,EAAa,IAAI,CAErB,QACKkB,GACLlB,EAAa,OAAO,EACZ,QAAA,MAAM,SAAUkB,CAAK,CAEjC,CACR,EAGMD,EAAiD,oBAWjD,IAAIE,EACAC,EAAY,EACZC,EAAa,EAEjB,SAASC,GAAuB,CACtB,MAAAC,EAAiB,SAAS,eAAe,SAAS,EACpDA,IACeA,EAAA,YAAc,mBAAmBH,eAAuBC,IAE/E,CAEA,SAASG,GAAY,CACjB,QAAQ,IAAI,kBAAkB,EAC9BH,IAEM,MAAAvB,CAAG,EACJ,KAAK2B,GAAYA,EAAS,MAAM,EAChC,KAAaC,GAAA,CACDxB,EAAA,KAAK,UAAUwB,CAAI,CAAC,EACdC,GAAA,CAClB,EACA,MAAeT,GAAA,CACJ,QAAA,MAAM,uBAAwBA,CAAK,EAC3ClB,EAAa,OAAO,CAAA,CACtB,CACV,CAEA,SAAS4B,GAAiB,CACxB,QAAQ,IAAI,iBAAiB,EAGnBJ,IACRL,EAAoB,YAAY,IAAM,CAClCC,IAEqBE,IAEjBF,GAAa,GACHI,KAEf,GAAI,CACX,CAEA,SAASG,GAAiB,CACVP,EAAA,EACSE,GACzB,CAEA,SAASO,GAAe,CAIhBV,IAAsB,QACtB,cAAcA,CAAiB,EAEnC,QAAQ,IAAI,iCAAiC,CACjD,CAEA,SAASW,GAAgB,CACNH,IACAC,GACnB,CAEA5B,EAAa,SAAS,EAGtB,OAAO,iBAAiB,OAAQ8B,CAAa,EAG7C,OAAO,iBAAiB,eAAgBD,CAAY,EAGpD,SAAS,iBAAiB,mBAAoB,IAAM,CAC5C,SAAS,kBAAoB,SAChBA,IACN,SAAS,kBAAoB,WACtBC,GAEtB,CAAC"}